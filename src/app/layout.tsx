"use client";
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
import { NextUIProvider, Spinner } from "@nextui-org/react";
import Nav from "@/components/Nav";
import {
  Navbar,
  NavbarBrand,
  NavbarContent,
  NavbarItem,
  NavbarMenuToggle,
  NavbarMenu,
  NavbarMenuItem,
} from "@nextui-org/react";
import { Dispatch, createContext, useEffect, useState } from "react";
import { supabase } from "@/lib/supabase";
import Toast from "@/components/Toast";
import ToastContext from "@/lib/toastContext";
const inter = Inter({ subsets: ["latin"] });

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const [loading, setLoading] = useState<boolean>(false);
  const [user, setUser] = useState<any>();

  useEffect(() => {
    // const getSession = async () => {
    //   const res = await supabase.auth.getSession();
    //   const sess = await res.data.session;
    //   console.log(sess);
    // };
    // getSession();
    async function getUser() {
      const {
        data: { user },
      } = await supabase.auth.getUser();
      //console.log(user)
      if (user) {
        setUser(user);
      } else {
        setUser(null);
      }
    }
    getUser();
  }, []);

  const toast = async (params: string) => {
    await setToastMessage(params);
    await console.log(params);
    await setIsVisible(true);
  };

  const [isVisible, setIsVisible] = useState(true);
  const [toastMessage, setToastMessage] = useState<string>("");
  // const [message, setMessage] = useState<string>("")
  useEffect(() => {
    // Set a timer for 2 seconds
    const timer = setTimeout(() => {
      setIsVisible(false);
    }, 2000);

    // Clean up the timer when the component unmounts
    return () => clearTimeout(timer);
  }, [isVisible]);

  return (
    <html lang="en">
      <body className="bg-white">
        <NextUIProvider>
          <ToastContext.Provider value={{ toast }}>
            {loading ? (
              <div className="flex w-full justify-center items-center p-2">
                <Spinner />
              </div>
            ) : (
              <>
                <Nav authUser={user} setAuthUser={setUser} />
                {isVisible && <Toast message={toastMessage} />}
              </>
            )}
            {children}
          </ToastContext.Provider>
        </NextUIProvider>
      </body>
    </html>
  );
}
